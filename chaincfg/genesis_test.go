// Copyright (c) 2014-2016 The btcsuite developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

// TestGenesisBlock tests the genesis block of the main network for validity by
// checking the encoded bytes and hashes.
func TestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

// TestRegTestGenesisBlock tests the genesis block of the regression test
// network for validity by checking the encoded bytes and hashes.
func TestRegTestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

// TestTestNet3GenesisBlock tests the genesis block of the test network (version
// 3) for validity by checking the encoded bytes and hashes.
func TestTestNet3GenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

// genesisBlockBytes are the wire encoded bytes for the genesis block of the
// main network as of protocol version 60002.
var genesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6d, 0xb9, 0x05, 0x14,
	0x23, 0x82, 0x32, 0x4d, 0xb4, 0x17, 0x76, 0x18,
	0x91, 0xf2, 0xd2, 0xf3, 0x55, 0xea, 0x92, 0xf2,
	0x7a, 0xb0, 0xfc, 0x35, 0xe5, 0x9e, 0x90, 0xb5,
	0x0e, 0x05, 0x34, 0xed, 0xf5, 0xd2, 0xaf, 0x59,
	0xff, 0xff, 0x00, 0x1f, 0xf9, 0x78, 0x7a, 0x00,
	0xe9, 0x65, 0xff, 0xd0, 0x02, 0xcd, 0x6a, 0xd0,
	0xe2, 0xdc, 0x40, 0x2b, 0x80, 0x44, 0xde, 0x83,
	0x3e, 0x06, 0xb2, 0x31, 0x27, 0xea, 0x8c, 0x3d,
	0x80, 0xae, 0xc9, 0x14, 0x10, 0x77, 0x14, 0x95,
	0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6,
	0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e,
	0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0,
	0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x42,
	0x00, 0x04, 0xbf, 0x91, 0x22, 0x1d, 0x01, 0x04,
	0x39, 0x53, 0x65, 0x70, 0x20, 0x30, 0x32, 0x2c,
	0x20, 0x32, 0x30, 0x31, 0x37, 0x20, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x20, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x73, 0x20, 0x24, 0x35, 0x2c,
	0x30, 0x30, 0x30, 0x20, 0x69, 0x6e, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x20, 0x66, 0x72, 0x65, 0x6e,
	0x7a, 0x79, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
	0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, 0x43,
	0x41, 0x04, 0x0d, 0x61, 0xd8, 0x65, 0x34, 0x48,
	0xc9, 0x87, 0x31, 0xee, 0x5f, 0xff, 0xd3, 0x03,
	0xc1, 0x5e, 0x71, 0xec, 0x20, 0x57, 0xb7, 0x7f,
	0x11, 0xab, 0x36, 0x01, 0x97, 0x97, 0x28, 0xcd,
	0xaf, 0xf2, 0xd6, 0x8a, 0xfb, 0xba, 0x14, 0xe4,
	0xfa, 0x0b, 0xc4, 0x4f, 0x20, 0x72, 0xb0, 0xb2,
	0x3e, 0xf6, 0x37, 0x17, 0xf8, 0xcd, 0xfb, 0xe5,
	0x8d, 0xcd, 0x33, 0xf3, 0x2b, 0x6a, 0xfe, 0x98,
	0x74, 0x1a, 0xac, 0x00, 0x00, 0x00, 0x00,
}

// regTestGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the regression test network as of protocol version 60002.
var regTestGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6d, 0xb9, 0x05, 0x14,
	0x23, 0x82, 0x32, 0x4d, 0xb4, 0x17, 0x76, 0x18,
	0x91, 0xf2, 0xd2, 0xf3, 0x55, 0xea, 0x92, 0xf2,
	0x7a, 0xb0, 0xfc, 0x35, 0xe5, 0x9e, 0x90, 0xb5,
	0x0e, 0x05, 0x34, 0xed, 0xf5, 0xd2, 0xaf, 0x59,
	0xff, 0xff, 0x7f, 0x20, 0x11, 0x00, 0x00, 0x00,
	0xe9, 0x65, 0xff, 0xd0, 0x02, 0xcd, 0x6a, 0xd0,
	0xe2, 0xdc, 0x40, 0x2b, 0x80, 0x44, 0xde, 0x83,
	0x3e, 0x06, 0xb2, 0x31, 0x27, 0xea, 0x8c, 0x3d,
	0x80, 0xae, 0xc9, 0x14, 0x10, 0x77, 0x14, 0x95,
	0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6,
	0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e,
	0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0,
	0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x42,
	0x00, 0x04, 0xbf, 0x91, 0x22, 0x1d, 0x01, 0x04,
	0x39, 0x53, 0x65, 0x70, 0x20, 0x30, 0x32, 0x2c,
	0x20, 0x32, 0x30, 0x31, 0x37, 0x20, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x20, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x73, 0x20, 0x24, 0x35, 0x2c,
	0x30, 0x30, 0x30, 0x20, 0x69, 0x6e, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x20, 0x66, 0x72, 0x65, 0x6e,
	0x7a, 0x79, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
	0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, 0x43,
	0x41, 0x04, 0x0d, 0x61, 0xd8, 0x65, 0x34, 0x48,
	0xc9, 0x87, 0x31, 0xee, 0x5f, 0xff, 0xd3, 0x03,
	0xc1, 0x5e, 0x71, 0xec, 0x20, 0x57, 0xb7, 0x7f,
	0x11, 0xab, 0x36, 0x01, 0x97, 0x97, 0x28, 0xcd,
	0xaf, 0xf2, 0xd6, 0x8a, 0xfb, 0xba, 0x14, 0xe4,
	0xfa, 0x0b, 0xc4, 0x4f, 0x20, 0x72, 0xb0, 0xb2,
	0x3e, 0xf6, 0x37, 0x17, 0xf8, 0xcd, 0xfb, 0xe5,
	0x8d, 0xcd, 0x33, 0xf3, 0x2b, 0x6a, 0xfe, 0x98,
	0x74, 0x1a, 0xac, 0x00, 0x00, 0x00, 0x00,
}

// testNet3GenesisBlockBytes are the wire encoded bytes for the genesis block of
// the test network (version 3) as of protocol version 60002.
var testNet3GenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6d, 0xb9, 0x05, 0x14,
	0x23, 0x82, 0x32, 0x4d, 0xb4, 0x17, 0x76, 0x18,
	0x91, 0xf2, 0xd2, 0xf3, 0x55, 0xea, 0x92, 0xf2,
	0x7a, 0xb0, 0xfc, 0x35, 0xe5, 0x9e, 0x90, 0xb5,
	0x0e, 0x05, 0x34, 0xed, 0xf5, 0xd2, 0xaf, 0x59,
	0xff, 0xff, 0x00, 0x1f, 0xc1, 0x25, 0x70, 0x00,
	0xe9, 0x65, 0xff, 0xd0, 0x02, 0xcd, 0x6a, 0xd0,
	0xe2, 0xdc, 0x40, 0x2b, 0x80, 0x44, 0xde, 0x83,
	0x3e, 0x06, 0xb2, 0x31, 0x27, 0xea, 0x8c, 0x3d,
	0x80, 0xae, 0xc9, 0x14, 0x10, 0x77, 0x14, 0x95,
	0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6,
	0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e,
	0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0,
	0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x42,
	0x00, 0x04, 0xbf, 0x91, 0x22, 0x1d, 0x01, 0x04,
	0x39, 0x53, 0x65, 0x70, 0x20, 0x30, 0x32, 0x2c,
	0x20, 0x32, 0x30, 0x31, 0x37, 0x20, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x20, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x73, 0x20, 0x24, 0x35, 0x2c,
	0x30, 0x30, 0x30, 0x20, 0x69, 0x6e, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x20, 0x66, 0x72, 0x65, 0x6e,
	0x7a, 0x79, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
	0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, 0x43,
	0x41, 0x04, 0x0d, 0x61, 0xd8, 0x65, 0x34, 0x48,
	0xc9, 0x87, 0x31, 0xee, 0x5f, 0xff, 0xd3, 0x03,
	0xc1, 0x5e, 0x71, 0xec, 0x20, 0x57, 0xb7, 0x7f,
	0x11, 0xab, 0x36, 0x01, 0x97, 0x97, 0x28, 0xcd,
	0xaf, 0xf2, 0xd6, 0x8a, 0xfb, 0xba, 0x14, 0xe4,
	0xfa, 0x0b, 0xc4, 0x4f, 0x20, 0x72, 0xb0, 0xb2,
	0x3e, 0xf6, 0x37, 0x17, 0xf8, 0xcd, 0xfb, 0xe5,
	0x8d, 0xcd, 0x33, 0xf3, 0x2b, 0x6a, 0xfe, 0x98,
	0x74, 0x1a, 0xac, 0x00, 0x00, 0x00, 0x00,
}
